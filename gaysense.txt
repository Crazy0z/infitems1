-- Authentic Gamesense UI (Based on the real GitHub source)
-- URL: https://raw.githubusercontent.com/Iucious/gamesense-ui/refs/heads/main/main.lua

local Library = {}
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Authentic Gamesense Colors (from the real source)
local Colors = {
    Background = Color3.fromRGB(18, 18, 18),
    Topbar = Color3.fromRGB(25, 25, 25), 
    Container = Color3.fromRGB(22, 22, 22),
    Element = Color3.fromRGB(30, 30, 30),
    ElementHover = Color3.fromRGB(35, 35, 35),
    Text = Color3.fromRGB(210, 210, 210),
    TextDark = Color3.fromRGB(150, 150, 150),
    Accent = Color3.fromRGB(65, 105, 225),
    AccentHover = Color3.fromRGB(75, 115, 235),
    Border = Color3.fromRGB(60, 60, 60),
    Success = Color3.fromRGB(100, 255, 100),
    Error = Color3.fromRGB(255, 100, 100)
}

-- Rainbow function (authentic gamesense rainbow)
local function GetRainbow()
    local t = tick() * 3
    local r = math.floor(math.sin(t) * 127 + 128)
    local g = math.floor(math.sin(t + 2.094) * 127 + 128) 
    local b = math.floor(math.sin(t + 4.188) * 127 + 128)
    return Color3.fromRGB(r, g, b)
end

-- Create main window
function Library:CreateWindow(title)
    local Window = {}
    
    -- Remove existing UI
    if CoreGui:FindFirstChild("GamesenseUI") then
        CoreGui.GamesenseUI:Destroy()
    end
    
    -- Main ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "GamesenseUI"
    ScreenGui.Parent = CoreGui
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Frame (Authentic dimensions)
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Colors.Background
    MainFrame.BorderColor3 = Colors.Border
    MainFrame.BorderSizePixel = 1
    MainFrame.Position = UDim2.new(0.1, 0, 0.1, 0)
    MainFrame.Size = UDim2.new(0, 750, 0, 550)
    MainFrame.Active = true
    MainFrame.Draggable = true
    
    -- Topbar
    local Topbar = Instance.new("Frame")
    Topbar.Name = "Topbar"
    Topbar.Parent = MainFrame
    Topbar.BackgroundColor3 = Colors.Topbar
    Topbar.BorderColor3 = Colors.Border
    Topbar.BorderSizePixel = 1
    Topbar.Size = UDim2.new(1, 0, 0, 28)
    
    -- Title (with rainbow effect like real gamesense)
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = Topbar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 8, 0, 0)
    Title.Size = UDim2.new(0, 200, 1, 0)
    Title.Font = Enum.Font.Code
    Title.Text = title or "gamesense"
    Title.TextColor3 = Colors.Text
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Rainbow title effect
    local rainbowConnection = RunService.Heartbeat:Connect(function()
        Title.TextColor3 = GetRainbow()
    end)
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = Topbar
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -25, 0, 0)
    CloseButton.Size = UDim2.new(0, 25, 1, 0)
    CloseButton.Font = Enum.Font.Code
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Colors.Error
    CloseButton.TextSize = 14
    
    CloseButton.MouseButton1Click:Connect(function()
        rainbowConnection:Disconnect()
        ScreenGui:Destroy()
    end)
    
    -- Container for tabs and content
    local Container = Instance.new("Frame")
    Container.Name = "Container"
    Container.Parent = MainFrame
    Container.BackgroundColor3 = Colors.Container
    Container.BorderSizePixel = 0
    Container.Position = UDim2.new(0, 0, 0, 28)
    Container.Size = UDim2.new(1, 0, 1, -28)
    
    -- Tab list (left side)
    local TabList = Instance.new("Frame")
    TabList.Name = "TabList"
    TabList.Parent = Container
    TabList.BackgroundColor3 = Colors.Container
    TabList.BorderColor3 = Colors.Border
    TabList.BorderSizePixel = 1
    TabList.Size = UDim2.new(0, 150, 1, 0)
    
    -- Content area (right side)
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Parent = Container
    ContentArea.BackgroundColor3 = Colors.Background
    ContentArea.BorderColor3 = Colors.Border
    ContentArea.BorderSizePixel = 1
    ContentArea.Position = UDim2.new(0, 150, 0, 0)
    ContentArea.Size = UDim2.new(1, -150, 1, 0)
    
    Window.Tabs = {}
    Window.CurrentTab = nil
    
    -- Create tab function
    function Window:CreateTab(name, icon)
        local Tab = {}
        local TabIndex = #self.Tabs + 1
        
        -- Tab button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = name .. "Button"
        TabButton.Parent = TabList
        TabButton.BackgroundColor3 = Colors.Element
        TabButton.BorderColor3 = Colors.Border
        TabButton.BorderSizePixel = 1
        TabButton.Position = UDim2.new(0, 5, 0, 5 + (TabIndex - 1) * 35)
        TabButton.Size = UDim2.new(1, -10, 0, 30)
        TabButton.Font = Enum.Font.Code
        TabButton.Text = (icon and icon .. " " or "") .. name
        TabButton.TextColor3 = Colors.TextDark
        TabButton.TextSize = 12
        TabButton.TextXAlignment = Enum.TextXAlignment.Left
        
        -- Tab content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = name .. "Content"
        TabContent.Parent = ContentArea
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.ScrollBarThickness = 6
        TabContent.ScrollBarImageColor3 = Colors.Border
        TabContent.Visible = false
        
        -- Layout for content
        local Layout = Instance.new("UIListLayout")
        Layout.Parent = TabContent
        Layout.SortOrder = Enum.SortOrder.LayoutOrder
        Layout.Padding = UDim.new(0, 8)
        
        local Padding = Instance.new("UIPadding")
        Padding.Parent = TabContent
        Padding.PaddingTop = UDim.new(0, 10)
        Padding.PaddingLeft = UDim.new(0, 10)
        Padding.PaddingRight = UDim.new(0, 20)
        
        -- Auto resize canvas
        Layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, Layout.AbsoluteContentSize.Y + 20)
        end)
        
        Tab.Content = TabContent
        Tab.Button = TabButton
        
        -- Tab selection logic
        TabButton.MouseButton1Click:Connect(function()
            -- Deselect all tabs
            for _, tab in pairs(self.Tabs) do
                tab.Content.Visible = false
                tab.Button.BackgroundColor3 = Colors.Element
                tab.Button.TextColor3 = Colors.TextDark
                tab.Button.BorderColor3 = Colors.Border
            end
            
            -- Select this tab
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Colors.Accent
            TabButton.TextColor3 = Colors.Text
            TabButton.BorderColor3 = Colors.AccentHover
            self.CurrentTab = Tab
        end)
        
        table.insert(self.Tabs, Tab)
        
        -- Auto-select first tab
        if TabIndex == 1 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Colors.Accent
            TabButton.TextColor3 = Colors.Text
            TabButton.BorderColor3 = Colors.AccentHover
            self.CurrentTab = Tab
        end
        
        -- Toggle/Checkbox
        function Tab:Toggle(name, default, callback)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = name
            ToggleFrame.Parent = self.Content
            ToggleFrame.BackgroundColor3 = Colors.Element
            ToggleFrame.BorderColor3 = Colors.Border
            ToggleFrame.BorderSizePixel = 1
            ToggleFrame.Size = UDim2.new(1, -10, 0, 28)
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Parent = ToggleFrame
            ToggleButton.BackgroundTransparency = 1
            ToggleButton.Size = UDim2.new(1, 0, 1, 0)
            ToggleButton.Font = Enum.Font.Code
            ToggleButton.Text = ""
            ToggleButton.TextColor3 = Colors.Text
            ToggleButton.TextSize = 12
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Parent = ToggleFrame
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Position = UDim2.new(0, 25, 0, 0)
            ToggleLabel.Size = UDim2.new(1, -30, 1, 0)
            ToggleLabel.Font = Enum.Font.Code
            ToggleLabel.Text = name
            ToggleLabel.TextColor3 = Colors.Text
            ToggleLabel.TextSize = 12
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local Checkbox = Instance.new("Frame")
            Checkbox.Parent = ToggleFrame
            Checkbox.BackgroundColor3 = Colors.Background
            Checkbox.BorderColor3 = Colors.Border
            Checkbox.BorderSizePixel = 1
            Checkbox.Position = UDim2.new(0, 5, 0, 8)
            Checkbox.Size = UDim2.new(0, 12, 0, 12)
            
            local Checkmark = Instance.new("TextLabel")
            Checkmark.Parent = Checkbox
            Checkmark.BackgroundTransparency = 1
            Checkmark.Size = UDim2.new(1, 0, 1, 0)
            Checkmark.Font = Enum.Font.Code
            Checkmark.Text = default and "âœ“" or ""
            Checkmark.TextColor3 = Colors.Success
            Checkmark.TextSize = 10
            
            local toggled = default or false
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                Checkmark.Text = toggled and "âœ“" or ""
                if callback then callback(toggled) end
            end)
            
            return {
                Set = function(value)
                    toggled = value
                    Checkmark.Text = toggled and "âœ“" or ""
                end
            }
        end
        
        -- Slider
        function Tab:Slider(name, min, max, default, callback)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = name
            SliderFrame.Parent = self.Content
            SliderFrame.BackgroundColor3 = Colors.Element
            SliderFrame.BorderColor3 = Colors.Border
            SliderFrame.BorderSizePixel = 1
            SliderFrame.Size = UDim2.new(1, -10, 0, 45)
            
            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Parent = SliderFrame
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Position = UDim2.new(0, 8, 0, 2)
            SliderLabel.Size = UDim2.new(0.7, 0, 0, 18)
            SliderLabel.Font = Enum.Font.Code
            SliderLabel.Text = name
            SliderLabel.TextColor3 = Colors.Text
            SliderLabel.TextSize = 12
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local ValueBox = Instance.new("TextBox")
            ValueBox.Parent = SliderFrame
            ValueBox.BackgroundColor3 = Colors.Background
            ValueBox.BorderColor3 = Colors.Border
            ValueBox.BorderSizePixel = 1
            ValueBox.Position = UDim2.new(0.7, 0, 0, 2)
            ValueBox.Size = UDim2.new(0.28, 0, 0, 18)
            ValueBox.Font = Enum.Font.Code
            ValueBox.Text = tostring(default)
            ValueBox.TextColor3 = Colors.Text
            ValueBox.TextSize = 11
            ValueBox.ClearTextOnFocus = false
            
            local SliderBar = Instance.new("Frame")
            SliderBar.Parent = SliderFrame
            SliderBar.BackgroundColor3 = Colors.Background
            SliderBar.BorderColor3 = Colors.Border
            SliderBar.BorderSizePixel = 1
            SliderBar.Position = UDim2.new(0, 8, 0, 25)
            SliderBar.Size = UDim2.new(1, -16, 0, 12)
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Parent = SliderBar
            SliderFill.BackgroundColor3 = Colors.Accent
            SliderFill.BorderSizePixel = 0
            SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            
            local SliderKnob = Instance.new("Frame")
            SliderKnob.Parent = SliderBar
            SliderKnob.BackgroundColor3 = Colors.Text
            SliderKnob.BorderSizePixel = 0
            SliderKnob.Position = UDim2.new((default - min) / (max - min), -3, 0, 2)
            SliderKnob.Size = UDim2.new(0, 6, 0, 8)
            
            local dragging = false
            local currentValue = default
            
            local function updateSlider(value)
                value = math.clamp(value, min, max)
                currentValue = value
                local percentage = (value - min) / (max - min)
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderKnob.Position = UDim2.new(percentage, -3, 0, 2)
                ValueBox.Text = tostring(value)
                if callback then callback(value) end
            end
            
            SliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local percentage = math.clamp((Mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                    local value = math.floor(min + (max - min) * percentage)
                    updateSlider(value)
                end
            end)
            
            ValueBox.FocusLost:Connect(function()
                local value = tonumber(ValueBox.Text) or currentValue
                updateSlider(value)
            end)
            
            return {
                Set = updateSlider
            }
        end
        
        -- Dropdown
        function Tab:Dropdown(name, options, callback)
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Name = name
            DropdownFrame.Parent = self.Content
            DropdownFrame.BackgroundColor3 = Colors.Element
            DropdownFrame.BorderColor3 = Colors.Border
            DropdownFrame.BorderSizePixel = 1
            DropdownFrame.Size = UDim2.new(1, -10, 0, 28)
            DropdownFrame.ClipsDescendants = false
            
            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Parent = DropdownFrame
            DropdownButton.BackgroundTransparency = 1
            DropdownButton.Size = UDim2.new(1, 0, 1, 0)
            DropdownButton.Font = Enum.Font.Code
            DropdownButton.Text = name .. ": " .. (options[1] or "")
            DropdownButton.TextColor3 = Colors.Text
            DropdownButton.TextSize = 12
            DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
            
            local DropdownArrow = Instance.new("TextLabel")
            DropdownArrow.Parent = DropdownFrame
            DropdownArrow.BackgroundTransparency = 1
            DropdownArrow.Position = UDim2.new(1, -20, 0, 0)
            DropdownArrow.Size = UDim2.new(0, 20, 1, 0)
            DropdownArrow.Font = Enum.Font.Code
            DropdownArrow.Text = "â–¼"
            DropdownArrow.TextColor3 = Colors.TextDark
            DropdownArrow.TextSize = 10
            
            local DropdownList = Instance.new("Frame")
            DropdownList.Parent = DropdownFrame
            DropdownList.BackgroundColor3 = Colors.Element
            DropdownList.BorderColor3 = Colors.Border
            DropdownList.BorderSizePixel = 1
            DropdownList.Position = UDim2.new(0, 0, 1, 0)
            DropdownList.Size = UDim2.new(1, 0, 0, #options * 22)
            DropdownList.Visible = false
            DropdownList.ZIndex = 10
            
            local selectedOption = options[1]
            local expanded = false
            
            for i, option in ipairs(options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Parent = DropdownList
                OptionButton.BackgroundColor3 = Colors.Element
                OptionButton.BorderSizePixel = 0
                OptionButton.Position = UDim2.new(0, 0, 0, (i-1) * 22)
                OptionButton.Size = UDim2.new(1, 0, 0, 22)
                OptionButton.Font = Enum.Font.Code
                OptionButton.Text = "  " .. option
                OptionButton.TextColor3 = Colors.TextDark
                OptionButton.TextSize = 11
                OptionButton.TextXAlignment = Enum.TextXAlignment.Left
                OptionButton.ZIndex = 11
                
                OptionButton.MouseEnter:Connect(function()
                    OptionButton.BackgroundColor3 = Colors.ElementHover
                    OptionButton.TextColor3 = Colors.Text
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    OptionButton.BackgroundColor3 = Colors.Element
                    OptionButton.TextColor3 = Colors.TextDark
                end)
                
                OptionButton.MouseButton1Click:Connect(function()
                    selectedOption = option
                    DropdownButton.Text = name .. ": " .. option
                    DropdownList.Visible = false
                    expanded = false
                    DropdownArrow.Text = "â–¼"
                    if callback then callback(option) end
                end)
            end
            
            DropdownButton.MouseButton1Click:Connect(function()
                expanded = not expanded
                DropdownList.Visible = expanded
                DropdownArrow.Text = expanded and "â–²" or "â–¼"
            end)
            
            return {
                Set = function(value)
                    if table.find(options, value) then
                        selectedOption = value
                        DropdownButton.Text = name .. ": " .. value
                    end
                end
            }
        end
        
        -- Button
        function Tab:Button(name, callback)
            local ButtonFrame = Instance.new("TextButton")
            ButtonFrame.Name = name
            ButtonFrame.Parent = self.Content
            ButtonFrame.BackgroundColor3 = Colors.Element
            ButtonFrame.BorderColor3 = Colors.Border
            ButtonFrame.BorderSizePixel = 1
            ButtonFrame.Size = UDim2.new(1, -10, 0, 28)
            ButtonFrame.Font = Enum.Font.Code
            ButtonFrame.Text = name
            ButtonFrame.TextColor3 = Colors.Text
            ButtonFrame.TextSize = 12
            
            ButtonFrame.MouseEnter:Connect(function()
                ButtonFrame.BackgroundColor3 = Colors.ElementHover
                ButtonFrame.BorderColor3 = Colors.Accent
            end)
            
            ButtonFrame.MouseLeave:Connect(function()
                ButtonFrame.BackgroundColor3 = Colors.Element
                ButtonFrame.BorderColor3 = Colors.Border
            end)
            
            ButtonFrame.MouseButton1Click:Connect(function()
                if callback then callback() end
            end)
        end
        
        -- Color Picker (with rainbow support)
        function Tab:ColorPicker(name, default, callback)
            local ColorFrame = Instance.new("Frame")
            ColorFrame.Name = name
            ColorFrame.Parent = self.Content
            ColorFrame.BackgroundColor3 = Colors.Element
            ColorFrame.BorderColor3 = Colors.Border
            ColorFrame.BorderSizePixel = 1
            ColorFrame.Size = UDim2.new(1, -10, 0, 28)
            
            local ColorLabel = Instance.new("TextLabel")
            ColorLabel.Parent = ColorFrame
            ColorLabel.BackgroundTransparency = 1
            ColorLabel.Position = UDim2.new(0, 8, 0, 0)
            ColorLabel.Size = UDim2.new(0.8, 0, 1, 0)
            ColorLabel.Font = Enum.Font.Code
            ColorLabel.Text = name
            ColorLabel.TextColor3 = Colors.Text
            ColorLabel.TextSize = 12
            ColorLabel.TextXAlignment = Enum.TextXAlignment.Left
            
            local ColorDisplay = Instance.new("Frame")
            ColorDisplay.Parent = ColorFrame
            ColorDisplay.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
            ColorDisplay.BorderColor3 = Colors.Border
            ColorDisplay.BorderSizePixel = 1
            ColorDisplay.Position = UDim2.new(0.8, 0, 0, 4)
            ColorDisplay.Size = UDim2.new(0.18, 0, 0, 20)
            
            local ColorButton = Instance.new("TextButton")
            ColorButton.Parent = ColorDisplay
            ColorButton.BackgroundTransparency = 1
            ColorButton.Size = UDim2.new(1, 0, 1, 0)
            ColorButton.Text = ""
            
            local rainbowEnabled = false
            local rainbowConnection
            
            ColorButton.MouseButton1Click:Connect(function()
                rainbowEnabled = not rainbowEnabled
                
                if rainbowEnabled then
                    rainbowConnection = RunService.Heartbeat:Connect(function()
                        local rainbowColor = GetRainbow()
                        ColorDisplay.BackgroundColor3 = rainbowColor
                        if callback then callback(rainbowColor) end
                    end)
                else
                    if rainbowConnection then
                        rainbowConnection:Disconnect()
                    end
                end
            end)
            
            return {
                Set = function(color)
                    if rainbowConnection then
                        rainbowConnection:Disconnect()
                        rainbowEnabled = false
                    end
                    ColorDisplay.BackgroundColor3 = color
                end
            }
        end
        
        return Tab
    end
    
    return Window
end

return Library
